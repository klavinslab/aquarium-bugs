#123 Dealing with static sample inputs.
By jvrana on 2017-08-09 20:16:41 UTC
Labels: #<Sawyer::Resource:0x00005609f8698b80> #<Sawyer::Resource:0x00005609f86a3648>

I'm not sure what the best convention for this is, but for some of my protocols, I would like have static sample inputs (inputs in which you cannot change the sample but can change the item). This comes up in my Lentivirus Packaging protocol, where potential inputs to the protocol include: (1) Cell Line, (2) Packaging Plasmid 1, (3) Packaging Plasmid 2, & (4) Envelope Plasmid. 

The thing is you probably never want to change these sample inputs since these sample inputs would never change. You definitely do not want the user altering the packaging cell line or plasmids due to some biosafety reasons (e.g. changing 3rd Gen Packaging vectors to 2nd Gen would be dangerous to technicians).

However, I would still like the benefit of being able to chain together operations to create the physical items (especially with the cells) in case there are none available, so I would like to keep these as operation inputs.

I was wondering if there could be a new convention for specifying a particular sample as an input. I think the proper solution to this is going to be different from the 'plan templates' we've been talking about since we do not want to allow the user to alter some of the sample inputs to some operations.

Comments: 1
--------
From jvrana on 2017-08-09 20:27:33 UTC

For now, I can set a precondition so that it cannot fire if the sample inputs are incorrect, so this is non-critical. But this may be a nice convention in case this pops up in other operations.

Maybe some kind of sample type filter for inputs where you can define what types of samples/items are available for a particular input so that items/samples are not available in the launcher unless they pass some criteria (this could potentially simply the precondition code?)
`{ |i| i.sample.name.include?("Ligase")` or `{ |i| i.get(:volume) > 100.0 }`

